{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Razas\\\\OneDrive\\\\Desktop\\\\TunerApp\\\\guitar-tuner\\\\src\\\\pages\\\\AudioRecorder.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { Button, Typography, Card, CardContent, Box } from '@mui/material';\nimport '../FrequencyAnimation.css'; // We'll define this animation class next\nimport TunerNeedle from '../TunerNeedle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioRecorder = () => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [note, setNote] = useState('');\n  const [frequency, setFrequency] = useState(null);\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const NOTE_FREQS = {\n    'E2': 82.41,\n    'A2': 110.00,\n    'D3': 146.83,\n    'G3': 196.00,\n    'B3': 246.94,\n    'E4': 329.63\n  };\n  const handleStartRecording = async () => {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    const mediaRecorder = new MediaRecorder(stream);\n    mediaRecorderRef.current = mediaRecorder;\n    audioChunksRef.current = [];\n    mediaRecorder.ondataavailable = event => {\n      if (event.data.size > 0) {\n        audioChunksRef.current.push(event.data);\n      }\n    };\n    mediaRecorder.onstop = async () => {\n      const audioBlob = new Blob(audioChunksRef.current, {\n        type: 'audio/webm'\n      });\n      const formData = new FormData();\n      formData.append('file', audioBlob, 'recording.webm');\n      try {\n        const response = await fetch('http://localhost:5000/api/detect-note', {\n          method: 'POST',\n          body: formData\n        });\n        const data = await response.json();\n        setNote(data.note || 'No note detected');\n        setFrequency(data.frequency || 0);\n      } catch (err) {\n        console.error('Error sending audio:', err);\n        setNote('Error');\n        setFrequency(null);\n      }\n\n      // Download the webm for debugging\n      // const url = URL.createObjectURL(audioBlob);\n      // const a = document.createElement('a');\n      // a.href = url;\n      // a.download = 'recorded_audio.webm';\n      // a.click();\n      // URL.revokeObjectURL(url);\n    };\n    mediaRecorder.start();\n    setIsRecording(true);\n    setTimeout(() => {\n      mediaRecorder.stop();\n      setIsRecording(false);\n    }, 3000);\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      maxWidth: 400,\n      margin: 'auto',\n      mt: 5,\n      p: 2,\n      borderRadius: 4,\n      boxShadow: 3\n    },\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        gutterBottom: true,\n        children: \"Guitar Note Detector\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: isRecording ? 'secondary' : 'primary',\n        onClick: handleStartRecording,\n        disabled: isRecording,\n        fullWidth: true,\n        children: isRecording ? 'Recording...' : 'Start Recording'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), note && /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        mt: 3,\n        textAlign: \"center\",\n        children: [\"\\uD83C\\uDFB5 Note: \", note]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), frequency && /*#__PURE__*/_jsxDEV(Box, {\n        mt: 2,\n        textAlign: \"center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle1\",\n            children: [\"Frequency: \", frequency, \" Hz\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), frequency && note && /*#__PURE__*/_jsxDEV(Box, {\n        mt: 3,\n        textAlign: \"center\",\n        children: /*#__PURE__*/_jsxDEV(TunerNeedle, {\n          frequency: frequency,\n          targetFrequency: NOTE_FREQS[note]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioRecorder, \"flZvl1pC587Vf1/4ny1AJOjCIkI=\");\n_c = AudioRecorder;\nexport default AudioRecorder;\nvar _c;\n$RefreshReg$(_c, \"AudioRecorder\");","map":{"version":3,"names":["React","useState","useRef","Button","Typography","Card","CardContent","Box","TunerNeedle","jsxDEV","_jsxDEV","AudioRecorder","_s","isRecording","setIsRecording","note","setNote","frequency","setFrequency","mediaRecorderRef","audioChunksRef","NOTE_FREQS","handleStartRecording","stream","navigator","mediaDevices","getUserMedia","audio","mediaRecorder","MediaRecorder","current","ondataavailable","event","data","size","push","onstop","audioBlob","Blob","type","formData","FormData","append","response","fetch","method","body","json","err","console","error","start","setTimeout","stop","sx","maxWidth","margin","mt","p","borderRadius","boxShadow","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","color","onClick","disabled","fullWidth","textAlign","targetFrequency","_c","$RefreshReg$"],"sources":["C:/Users/Razas/OneDrive/Desktop/TunerApp/guitar-tuner/src/pages/AudioRecorder.jsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport { Button, Typography, Card, CardContent, Box } from '@mui/material';\r\nimport '../FrequencyAnimation.css'; // We'll define this animation class next\r\nimport TunerNeedle from '../TunerNeedle';\r\n\r\n\r\nconst AudioRecorder = () => {\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [note, setNote] = useState('');\r\n  const [frequency, setFrequency] = useState(null);\r\n  const mediaRecorderRef = useRef(null);\r\n  const audioChunksRef = useRef([]);\r\n\r\n  const NOTE_FREQS = {\r\n    'E2': 82.41, 'A2': 110.00, 'D3': 146.83,\r\n    'G3': 196.00, 'B3': 246.94, 'E4': 329.63\r\n  };\r\n\r\n\r\n  const handleStartRecording = async () => {\r\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n    const mediaRecorder = new MediaRecorder(stream);\r\n    mediaRecorderRef.current = mediaRecorder;\r\n    audioChunksRef.current = [];\r\n\r\n    mediaRecorder.ondataavailable = event => {\r\n      if (event.data.size > 0) {\r\n        audioChunksRef.current.push(event.data);\r\n      }\r\n    };\r\n\r\n    mediaRecorder.onstop = async () => {\r\n      const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/webm' });\r\n\r\n      const formData = new FormData();\r\n      formData.append('file', audioBlob, 'recording.webm');\r\n\r\n      try {\r\n        const response = await fetch('http://localhost:5000/api/detect-note', {\r\n          method: 'POST',\r\n          body: formData\r\n        });\r\n\r\n        const data = await response.json();\r\n        setNote(data.note || 'No note detected');\r\n        setFrequency(data.frequency || 0);\r\n      } catch (err) {\r\n        console.error('Error sending audio:', err);\r\n        setNote('Error');\r\n        setFrequency(null);\r\n      }\r\n\r\n      // Download the webm for debugging\r\n      // const url = URL.createObjectURL(audioBlob);\r\n      // const a = document.createElement('a');\r\n      // a.href = url;\r\n      // a.download = 'recorded_audio.webm';\r\n      // a.click();\r\n      // URL.revokeObjectURL(url);\r\n    };\r\n\r\n    mediaRecorder.start();\r\n    setIsRecording(true);\r\n\r\n    setTimeout(() => {\r\n      mediaRecorder.stop();\r\n      setIsRecording(false);\r\n    }, 3000);\r\n  };\r\n\r\n  return (\r\n    <Card sx={{ maxWidth: 400, margin: 'auto', mt: 5, p: 2, borderRadius: 4, boxShadow: 3 }}>\r\n      <CardContent>\r\n        <Typography variant=\"h5\" gutterBottom>\r\n          Guitar Note Detector\r\n        </Typography>\r\n        <Button\r\n          variant=\"contained\"\r\n          color={isRecording ? 'secondary' : 'primary'}\r\n          onClick={handleStartRecording}\r\n          disabled={isRecording}\r\n          fullWidth\r\n        >\r\n          {isRecording ? 'Recording...' : 'Start Recording'}\r\n        </Button>\r\n\r\n        {note && (\r\n          <Typography variant=\"h6\" mt={3} textAlign=\"center\">\r\n            ðŸŽµ Note: {note}\r\n          </Typography>\r\n        )}\r\n\r\n        {frequency && (\r\n          <Box mt={2} textAlign=\"center\">\r\n            <div>\r\n              <Typography variant=\"subtitle1\">Frequency: {frequency} Hz</Typography>\r\n            </div>\r\n          </Box>\r\n        )}\r\n        {frequency && note && (\r\n          <Box mt={3} textAlign=\"center\">\r\n            <TunerNeedle frequency={frequency} targetFrequency={NOTE_FREQS[note]} />\r\n          </Box>\r\n        )}\r\n\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default AudioRecorder;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}